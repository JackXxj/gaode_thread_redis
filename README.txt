# 分布式爬虫

gaode_write_redis.py    # 实现将源数据写入到redis中。(具体多久写入一次redis中，根据具体项目实现具体的调度策略)

gaode_write_redis.py 实现将redis中的数据放入文本文件中 （需要设置一个合理的调度时间(防止redis内存在一段时间内暴增),当设置了合理的调度时间后，需要在脚本中实现脚本结束的代码块。防止脚本未结束导致脚本一直累积。）【设置调度策略只能说这是优化问题】

gaode.py  # 按照具体爬虫项目的调度策略，从而设置项目完成之退出项目的规则（如：高德爬虫项目，它是每天爬取一次（所以对于爬虫项目退出规则：思想1：从redis中获取源数据为None时就退出线程（对于在一天内可以抓取完成的项目）；2、设置天的判断，如果爬虫进入另一天的时候就退出线程，结束爬虫项目。））    # 对于redis而言一般不会在while中进行redis中是否有数据的判断（可能会出现redis异常），所以一般在while语句里面进行判断redis中是否有数据，从而结束当前线程【所以，对于爬虫项目而言，只会用到redis中的取数据（1、实现取数据；2、判断数据该key是否为空，从而退出线程）和入数据的命令操作。判断redis中数据是否为空一般不用（容易造成redis异常）】


总结：
    其实分布式的整个核心就是：通过分布式加快爬取速度，但是需要时刻注意redis的内存问题（核心问题：redis内存问题。减少对redis内存的大幅度的消耗。）